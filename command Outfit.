__int64 __fastcall sub_140994D20(__int64 a1, _BYTE *a2)
{
  CHAR *v2; // r15
  CHAR *v3; // rdi
  CHAR *v4; // rdi
  char *v5; // rcx
  __int64 v6; // rax
  char v7; // dl
  char *v8; // r8
  const char *v9; // rdx
  unsigned __int8 v10; // al
  CHAR *v11; // rdi
  CHAR *v12; // rdi
  int v13; // eax
  bool v14; // zf
  __int64 v15; // rdi
  char v16; // r13
  int v17; // esi
  int v18; // edi
  char *v19; // rdi
  int v20; // ebx
  int v21; // edx
  volatile signed __int32 *v22; // rax
  void *v23; // rsi
  int v24; // er12
  __int64 v25; // rbx
  __int64 result; // rax
  char v27; // si
  signed __int32 v28; // eax
  unsigned __int8 v29; // of
  signed __int32 v30; // eax
  char *v31; // r8
  const char *v32; // rdx
  unsigned __int8 v33; // al
  char *v34; // r8
  const char *v35; // rdx
  unsigned __int8 v36; // al
  char *v37; // r8
  const char *v38; // rsi
  const char *v39; // rdx
  unsigned __int8 v40; // al
  __int64 v41; // rbx
  signed __int32 v42; // eax
  signed __int32 v43; // eax
  char *v44; // r8
  const char *v45; // rbx
  const char *v46; // rdx
  unsigned __int8 v47; // al
  signed __int32 v48; // eax
  signed __int32 v49; // eax
  char *v50; // r8
  const char *v51; // rdx
  unsigned __int8 v52; // al
  CHAR *v53; // r8
  unsigned __int8 v54; // al
  CHAR *v55; // r8
  unsigned __int8 v56; // al
  signed __int32 v57; // eax
  signed __int32 v58; // eax
  char *v59; // r8
  const char *v60; // rdx
  unsigned __int8 v61; // al
  CHAR *v62; // r8
  unsigned __int8 v63; // al
  CHAR *v64; // r8
  unsigned __int8 v65; // al
  signed __int32 v66; // eax
  signed __int32 v67; // eax
  char *v68; // r8
  const char *v69; // rdx
  unsigned __int8 v70; // al
  CHAR *v71; // r8
  unsigned __int8 v72; // al
  CHAR *v73; // r8
  unsigned __int8 v74; // al
  signed __int32 v75; // eax
  signed __int32 v76; // eax
  char *v77; // r8
  const char *v78; // rdx
  unsigned __int8 v79; // al
  char *v80; // r8
  const char *v81; // rdx
  unsigned __int8 v82; // al
  __int64 v83; // rbx
  CHAR *v84; // rdi
  CHAR *v85; // rdi
  __int64 v86; // rdi
  __int64 v87; // rbx
  __int64 v88; // rdi
  signed __int32 v89; // eax
  signed __int32 v90; // eax
  char *v91; // r8
  const char *v92; // rdx
  unsigned __int8 v93; // al
  __int64 v94; // rbx
  CHAR *v95; // rdi
  CHAR *v96; // rdi
  __int64 v97; // rdi
  __int64 v98; // rbx
  signed __int32 v99; // eax
  char *v100; // r8
  const char *v101; // rdx
  unsigned __int8 v102; // al
  __int64 v103; // rbx
  CHAR *v104; // rdi
  CHAR *v105; // rdi
  CHAR *v106; // rdi
  __int64 v107; // rbx
  CHAR *v108; // rdi
  CHAR *v109; // rdi
  __int64 v110; // rdi
  signed __int32 v111; // eax
  signed __int32 v112; // eax
  signed __int32 v113; // eax
  char *v114; // r8
  const char *v115; // rdx
  unsigned __int8 v116; // al
  char *v117; // r8
  const char *v118; // rdx
  unsigned __int8 v119; // al
  __int64 v120; // rbx
  CHAR *v121; // rdi
  CHAR *v122; // rdi
  CHAR *v123; // rdi
  __int64 v124; // rbx
  CHAR *v125; // rdi
  __int64 v126; // rdi
  signed __int32 v127; // eax
  signed __int32 v128; // eax
  signed __int32 v129; // eax
  signed __int32 v130; // eax
  __int64 v131; // rdx
  __int64 v132; // r9
  signed __int32 v133; // eax
  const char *v134; // rbx
  int v135; // ebx
  int v136; // edi
  __int64 v137; // [rsp+20h] [rbp-E0h]
  __int64 v138; // [rsp+28h] [rbp-D8h]
  char v139; // [rsp+30h] [rbp-D0h]
  CHAR *v140; // [rsp+38h] [rbp-C8h]
  int *v141; // [rsp+40h] [rbp-C0h]
  void *Src; // [rsp+48h] [rbp-B8h]
  __int64 v143; // [rsp+50h] [rbp-B0h]
  int *v144; // [rsp+58h] [rbp-A8h]
  CHAR *v145; // [rsp+60h] [rbp-A0h]
  __int64 v146; // [rsp+68h] [rbp-98h]
  int *v147; // [rsp+70h] [rbp-90h]
  CHAR *v148; // [rsp+78h] [rbp-88h]
  __int64 v149; // [rsp+80h] [rbp-80h]
  int *v150; // [rsp+88h] [rbp-78h]
  CHAR *v151; // [rsp+90h] [rbp-70h]
  __int64 v152; // [rsp+98h] [rbp-68h]
  int *v153; // [rsp+A0h] [rbp-60h]
  CHAR *v154; // [rsp+A8h] [rbp-58h]
  __int64 v155; // [rsp+B0h] [rbp-50h]
  int *v156; // [rsp+B8h] [rbp-48h]
  CHAR *v157; // [rsp+C0h] [rbp-40h]
  __int64 v158; // [rsp+C8h] [rbp-38h]
  int *v159; // [rsp+D0h] [rbp-30h]
  CHAR *v160; // [rsp+D8h] [rbp-28h]
  __int64 v161; // [rsp+E0h] [rbp-20h]
  int *v162; // [rsp+E8h] [rbp-18h]
  CHAR *v163; // [rsp+F0h] [rbp-10h]
  __int64 v164; // [rsp+F8h] [rbp-8h]
  int v165; // [rsp+100h] [rbp+0h]
  int v166; // [rsp+104h] [rbp+4h]
  __int64 v167; // [rsp+108h] [rbp+8h]
  int *v168; // [rsp+110h] [rbp+10h]
  CHAR *v169; // [rsp+118h] [rbp+18h]
  __int64 v170; // [rsp+120h] [rbp+20h]
  int *v171; // [rsp+128h] [rbp+28h]
  CHAR *v172; // [rsp+130h] [rbp+30h]
  __int64 v173; // [rsp+138h] [rbp+38h]
  int *v174; // [rsp+140h] [rbp+40h]
  CHAR *v175; // [rsp+148h] [rbp+48h]
  __int64 v176; // [rsp+150h] [rbp+50h]
  int *v177; // [rsp+158h] [rbp+58h]
  CHAR *v178; // [rsp+160h] [rbp+60h]
  __int64 v179; // [rsp+168h] [rbp+68h]
  int *v180; // [rsp+170h] [rbp+70h]
  CHAR *v181; // [rsp+178h] [rbp+78h]
  __int64 v182; // [rsp+180h] [rbp+80h]
  int *v183; // [rsp+188h] [rbp+88h]
  CHAR *v184; // [rsp+190h] [rbp+90h]
  __int64 v185; // [rsp+198h] [rbp+98h]
  int *v186; // [rsp+1A0h] [rbp+A0h]
  CHAR *v187; // [rsp+1A8h] [rbp+A8h]
  __int64 v188; // [rsp+1B0h] [rbp+B0h]
  int *v189; // [rsp+1B8h] [rbp+B8h]
  CHAR *v190; // [rsp+1C0h] [rbp+C0h]
  __int64 v191; // [rsp+1C8h] [rbp+C8h]
  int *v192; // [rsp+1D0h] [rbp+D0h]
  CHAR *v193; // [rsp+1D8h] [rbp+D8h]
  __int64 v194; // [rsp+1E0h] [rbp+E0h]
  int *v195; // [rsp+1E8h] [rbp+E8h]
  CHAR *v196; // [rsp+1F0h] [rbp+F0h]
  __int64 v197; // [rsp+1F8h] [rbp+F8h]
  int *v198; // [rsp+200h] [rbp+100h]
  CHAR *v199; // [rsp+208h] [rbp+108h]
  __int64 v200; // [rsp+210h] [rbp+110h]
  int *v201; // [rsp+218h] [rbp+118h]
  CHAR *v202; // [rsp+220h] [rbp+120h]
  __int64 v203; // [rsp+228h] [rbp+128h]
  int *v204; // [rsp+230h] [rbp+130h]
  CHAR *v205; // [rsp+238h] [rbp+138h]
  __int64 v206; // [rsp+240h] [rbp+140h]
  int *v207; // [rsp+248h] [rbp+148h]
  CHAR *v208; // [rsp+250h] [rbp+150h]
  __int64 v209; // [rsp+258h] [rbp+158h]
  int *v210; // [rsp+260h] [rbp+160h]
  CHAR *v211; // [rsp+268h] [rbp+168h]
  __int64 v212; // [rsp+270h] [rbp+170h]
  int *v213; // [rsp+278h] [rbp+178h]
  CHAR *v214; // [rsp+280h] [rbp+180h]
  __int64 v215; // [rsp+288h] [rbp+188h]
  __int64 v216; // [rsp+290h] [rbp+190h]
  __int64 v217; // [rsp+298h] [rbp+198h]
  __int64 v218; // [rsp+2A0h] [rbp+1A0h]
  __int64 v219; // [rsp+2A8h] [rbp+1A8h]
  __int64 v220; // [rsp+2B0h] [rbp+1B0h]
  __int64 v221; // [rsp+2B8h] [rbp+1B8h]
  __int64 v222; // [rsp+2C0h] [rbp+1C0h]
  __int64 v223; // [rsp+2C8h] [rbp+1C8h]
  __int64 v224; // [rsp+2D0h] [rbp+1D0h]
  __int64 v225; // [rsp+2D8h] [rbp+1D8h]
  void *v226; // [rsp+2E0h] [rbp+1E0h]
  int v227; // [rsp+2E8h] [rbp+1E8h]
  int v228; // [rsp+2F0h] [rbp+1F0h]
  __int64 v229; // [rsp+2F8h] [rbp+1F8h]
  int *v230; // [rsp+300h] [rbp+200h]
  CHAR *v231; // [rsp+308h] [rbp+208h]
  __int64 v232; // [rsp+310h] [rbp+210h]
  int *v233; // [rsp+318h] [rbp+218h]
  CHAR *v234; // [rsp+320h] [rbp+220h]
  __int64 v235; // [rsp+328h] [rbp+228h]
  void *v236; // [rsp+340h] [rbp+240h]
  int v237; // [rsp+348h] [rbp+248h]
  int v238; // [rsp+350h] [rbp+250h]
  __int64 v239; // [rsp+358h] [rbp+258h]
  __int64 v240; // [rsp+360h] [rbp+260h]
  int *v241; // [rsp+368h] [rbp+268h]
  CHAR *v242; // [rsp+370h] [rbp+270h]
  __int64 v243; // [rsp+378h] [rbp+278h]
  int *v244; // [rsp+380h] [rbp+280h]
  CHAR *v245; // [rsp+388h] [rbp+288h]
  __int64 v246; // [rsp+390h] [rbp+290h]
  int *v247; // [rsp+398h] [rbp+298h]
  CHAR *v248; // [rsp+3A0h] [rbp+2A0h]
  __int64 v249; // [rsp+3A8h] [rbp+2A8h]
  void *v250; // [rsp+3C0h] [rbp+2C0h]
  int v251; // [rsp+3C8h] [rbp+2C8h]
  int v252; // [rsp+3D0h] [rbp+2D0h]
  __int64 v253; // [rsp+3D8h] [rbp+2D8h]
  int *v254; // [rsp+3E0h] [rbp+2E0h]
  CHAR *v255; // [rsp+3E8h] [rbp+2E8h]
  __int64 v256; // [rsp+3F0h] [rbp+2F0h]
  __int64 v257; // [rsp+3F8h] [rbp+2F8h]
  int *v258; // [rsp+400h] [rbp+300h]
  CHAR *v259; // [rsp+408h] [rbp+308h]
  __int64 v260; // [rsp+410h] [rbp+310h]
  int *v261; // [rsp+418h] [rbp+318h]
  CHAR *v262; // [rsp+420h] [rbp+320h]
  __int64 v263; // [rsp+428h] [rbp+328h]
  int v264; // [rsp+430h] [rbp+330h]
  int *v265; // [rsp+438h] [rbp+338h]
  CHAR *v266; // [rsp+440h] [rbp+340h]
  __int64 v267; // [rsp+448h] [rbp+348h]
  void *v268; // [rsp+460h] [rbp+360h]
  int v269; // [rsp+468h] [rbp+368h]
  int v270; // [rsp+470h] [rbp+370h]
  __int64 v271; // [rsp+478h] [rbp+378h]
  int *v272; // [rsp+480h] [rbp+380h]
  CHAR *v273; // [rsp+488h] [rbp+388h]
  __int64 v274; // [rsp+490h] [rbp+390h]
  int *v275; // [rsp+498h] [rbp+398h]
  CHAR *v276; // [rsp+4A0h] [rbp+3A0h]
  __int64 v277; // [rsp+4A8h] [rbp+3A8h]
  int *v278; // [rsp+4B0h] [rbp+3B0h]
  CHAR *v279; // [rsp+4B8h] [rbp+3B8h]
  __int64 v280; // [rsp+4C0h] [rbp+3C0h]
  void *v281; // [rsp+4D0h] [rbp+3D0h]
  int v282; // [rsp+4D8h] [rbp+3D8h]
  int v283; // [rsp+4E0h] [rbp+3E0h]
  __int64 v284; // [rsp+4E8h] [rbp+3E8h]
  int *v285; // [rsp+4F0h] [rbp+3F0h]
  CHAR *v286; // [rsp+4F8h] [rbp+3F8h]
  __int64 v287; // [rsp+500h] [rbp+400h]
  int *v288; // [rsp+508h] [rbp+408h]
  CHAR *v289; // [rsp+510h] [rbp+410h]
  __int64 v290; // [rsp+518h] [rbp+418h]
  void *v291; // [rsp+530h] [rbp+430h]
  int v292; // [rsp+538h] [rbp+438h]
  int v293; // [rsp+540h] [rbp+440h]
  __int64 v294; // [rsp+548h] [rbp+448h]
  int *v295; // [rsp+550h] [rbp+450h]
  CHAR *v296; // [rsp+558h] [rbp+458h]
  __int64 v297; // [rsp+560h] [rbp+460h]
  __int64 v298; // [rsp+568h] [rbp+468h]
  int *v299; // [rsp+570h] [rbp+470h]
  CHAR *v300; // [rsp+578h] [rbp+478h]
  __int64 v301; // [rsp+580h] [rbp+480h]
  int *v302; // [rsp+588h] [rbp+488h]
  CHAR *v303; // [rsp+590h] [rbp+490h]
  __int64 v304; // [rsp+598h] [rbp+498h]
  void *v305; // [rsp+5B0h] [rbp+4B0h]
  int v306; // [rsp+5B8h] [rbp+4B8h]
  int v307; // [rsp+5C0h] [rbp+4C0h]
  __int64 v308; // [rsp+5C8h] [rbp+4C8h]
  void *v309; // [rsp+5D0h] [rbp+4D0h]
  int v310; // [rsp+5D8h] [rbp+4D8h]
  int v311; // [rsp+5E0h] [rbp+4E0h]
  __int64 v312; // [rsp+5E8h] [rbp+4E8h]
  int *v313; // [rsp+5F0h] [rbp+4F0h]
  CHAR *v314; // [rsp+5F8h] [rbp+4F8h]
  __int64 v315; // [rsp+600h] [rbp+500h]
  int *v316; // [rsp+608h] [rbp+508h]
  CHAR *v317; // [rsp+610h] [rbp+510h]
  __int64 v318; // [rsp+618h] [rbp+518h]
  int *v319; // [rsp+620h] [rbp+520h]
  CHAR *v320; // [rsp+628h] [rbp+528h]
  __int64 v321; // [rsp+630h] [rbp+530h]
  __int64 v322; // [rsp+638h] [rbp+538h]
  void *v323; // [rsp+640h] [rbp+540h]
  int v324; // [rsp+648h] [rbp+548h]
  int v325; // [rsp+650h] [rbp+550h]
  __int64 v326; // [rsp+658h] [rbp+558h]
  void *v327; // [rsp+660h] [rbp+560h]
  int v328; // [rsp+668h] [rbp+568h]
  int v329; // [rsp+670h] [rbp+570h]
  __int64 v330; // [rsp+678h] [rbp+578h]
  void *v331; // [rsp+680h] [rbp+580h]
  int v332; // [rsp+688h] [rbp+588h]
  int v333; // [rsp+690h] [rbp+590h]
  __int64 v334; // [rsp+698h] [rbp+598h]
  char v335; // [rsp+6A0h] [rbp+5A0h]
  void *v336; // [rsp+6A8h] [rbp+5A8h]
  int v337; // [rsp+6B0h] [rbp+5B0h]
  int v338; // [rsp+6B8h] [rbp+5B8h]
  __int64 v339; // [rsp+6C0h] [rbp+5C0h]
  char v340; // [rsp+6C8h] [rbp+5C8h]
  void *v341; // [rsp+6D0h] [rbp+5D0h]
  int v342; // [rsp+6D8h] [rbp+5D8h]
  int v343; // [rsp+6E0h] [rbp+5E0h]
  __int64 v344; // [rsp+6E8h] [rbp+5E8h]
  char v345; // [rsp+6F0h] [rbp+5F0h]
  void *v346; // [rsp+6F8h] [rbp+5F8h]
  int v347; // [rsp+700h] [rbp+600h]
  int v348; // [rsp+708h] [rbp+608h]
  __int64 v349; // [rsp+710h] [rbp+610h]
  char v350; // [rsp+718h] [rbp+618h]
  __int64 v351; // [rsp+720h] [rbp+620h]
  char v352; // [rsp+728h] [rbp+628h]
  __int64 v353; // [rsp+730h] [rbp+630h]
  __int64 v354; // [rsp+738h] [rbp+638h]
  __int64 v355; // [rsp+740h] [rbp+640h]
  char v356; // [rsp+748h] [rbp+648h]
  char v357; // [rsp+750h] [rbp+650h]
  char v358; // [rsp+760h] [rbp+660h]
  __int64 v359; // [rsp+780h] [rbp+680h]
  char v360; // [rsp+788h] [rbp+688h]
  int v361; // [rsp+798h] [rbp+698h]
  char v362; // [rsp+850h] [rbp+750h]
  char v363; // [rsp+8D0h] [rbp+7D0h]
  char v364; // [rsp+10D0h] [rbp+FD0h]
  char v365; // [rsp+18D0h] [rbp+17D0h]
  char v366; // [rsp+20D0h] [rbp+1FD0h]
  char v367; // [rsp+28D0h] [rbp+27D0h]
  char v368; // [rsp+30D0h] [rbp+2FD0h]
  char v369; // [rsp+38D0h] [rbp+37D0h]

  v353 = -2i64;
  v2 = Dst;
  if ( !a2 || !*a2 )
    goto LABEL_260;
  v213 = &dword_141FCF430;
  v214 = Dst;
  v215 = 0i64;
  sub_1402929B0(&v213, a2);
  v3 = v214;
  LOBYTE(v138) = 1;
  v4 = &v3[(signed int)sub_1403085F0((char)v214, (unsigned __int64)&v362, 128)];
  v140 = v4;
  v5 = &v362;
  if ( v362 )
  {
    do
    {
      v6 = (unsigned __int8)*v5;
      v7 = *((_BYTE *)&_ImageBase + v6 + 61253744);
      if ( (_BYTE)v6 != v7 )
        *v5 = v7;
      ++v5;
    }
    while ( *v5 );
  }
  v8 = &v362;
  v9 = "create";
  v10 = 99;
  do
  {
    if ( *((_BYTE *)&_ImageBase + v10 + 43442464) != *((_BYTE *)&_ImageBase + (unsigned __int8)*v8 + 43442464) )
      break;
    ++v9;
    ++v8;
    v10 = *v9;
  }
  while ( *v9 );
  if ( *((char *)&_ImageBase + *(unsigned __int8 *)v9 + 43442464) == *((char *)&_ImageBase
                                                                     + (unsigned __int8)*v8
                                                                     + 43442464) )
  {
    v153 = &dword_141FCF430;
    v154 = Dst;
    v155 = 0i64;
    v11 = &v4[(signed int)sub_1403087E0((char)v4)];
    LOBYTE(v137) = 1;
    v12 = &v11[(signed int)sub_1403087E0((char)v11)];
    v13 = sub_140308360(v12);
    v14 = &v12[v13] == 0i64;
    v15 = (__int64)&v12[v13];
    v140 = (CHAR *)v15;
    v141 = &dword_141FCF430;
    Src = Dst;
    v143 = 0i64;
    v16 = 0;
    if ( !v14 )
    {
      v364 = 0;
      sub_1403085F0(v15, (unsigned __int64)&v364, 0);
      sub_140294060(&v364, &v167);
      v363 = 0;
      LOBYTE(v138) = 1;
      LOBYTE(v137) = 1;
      v17 = sub_1403085F0(v15, (unsigned __int64)&v363, 0);
      v166 = v17;
      if ( v363 )
      {
        if ( &v363 != Src || SHIDWORD(v143) <= 0 )
        {
          v19 = &v363;
          do
            ++v19;
          while ( *v19 );
          v18 = (_DWORD)v19 - (unsigned __int64)&v363;
          v20 = v18 + 1;
          if ( v18 + 1 > SHIDWORD(v143) || SHIDWORD(v143) > 0 && *((_DWORD *)Src - 1) > 1 )
          {
            v21 = v18 + 1;
            if ( v20 < (signed int)v143 + 1 )
              v21 = v143 + 1;
            v22 = (volatile signed __int32 *)(*((__int64 (__fastcall **)(int **, _QWORD, int *, char *, char, char))v141
                                              + 1))(
                                               &v141,
                                               (unsigned int)(v21 + 4),
                                               &v165,
                                               &v139,
                                               1,
                                               1);
            if ( v22 )
              _InterlockedExchange(v22, v139 != 0);
            v23 = (void *)(v22 + 1);
            v24 = v165 - 4;
            memmove((void *)(v22 + 1), Src, (signed int)v143 + 1);
            if ( SHIDWORD(v143) > 0 && _InterlockedExchangeAdd((volatile signed __int32 *)Src - 1, 0xFFFFFFFF) <= 1 )
              (*((void (__fastcall **)(int **))v141 + 2))(&v141);
            Src = v23;
            HIDWORD(v143) = v24;
            v17 = v166;
          }
          memmove(Src, &v363, v20);
          LODWORD(v143) = v18;
        }
        else
        {
          v18 = v143;
        }
      }
      else
      {
        if ( SHIDWORD(v143) > 0 && _InterlockedExchangeAdd((volatile signed __int32 *)Src - 1, 0xFFFFFFFF) <= 1 )
          (*((void (__fastcall **)(int **))v141 + 2))(&v141);
        Src = Dst;
        v143 = 0i64;
        v18 = 0;
      }
      v25 = v167;
      result = qword_143B96BA0;
      if ( v167 != qword_143B96BA0 || v18 > 0 )
        v16 = 1;
      if ( v17 )
        goto LABEL_261;
    }
    v25 = *(_QWORD *)(*(__int64 (__fastcall **)(__int64, char *))(*(_QWORD *)qword_143B54B20 + 464i64))(
                       qword_143B54B20,
                       &v352);
    v167 = v25;
    result = qword_143B96BA0;
    if ( qword_143B96BA0 == v25 )
    {
LABEL_261:
      if ( !v16 )
      {
        v25 = *(_QWORD *)(qword_143B54B20 + 232784);
        v167 = *(_QWORD *)(qword_143B54B20 + 232784);
      }
    }
    if ( (signed int)v155 <= 0 )
    {
      v27 = 0;
    }
    else
    {
      v27 = 1;
      v227 = 88;
      v228 = 23;
      v226 = &unk_1420EF250;
      v229 = result;
      v230 = &dword_141FCF430;
      v231 = Dst;
      v232 = 0i64;
      v233 = &dword_141FCF430;
      v234 = Dst;
      v235 = 0i64;
      sub_1402928A0(&v233, &v153);
      v229 = v25;
      sub_1402928A0(&v230, &v141);
      sub_140983D20(*(_QWORD *)(qword_143B54F38 + 8), &v226, 1i64, 1i64, v137, v138);
      result = sub_140990120(&v226);
    }
    v141 = &dword_141FCF430;
    if ( SHIDWORD(v143) > 0 )
    {
      v28 = _InterlockedExchangeAdd((volatile signed __int32 *)Src - 1, 0xFFFFFFFF);
      v29 = __OFSUB__(v28, 1);
      result = (unsigned int)(v28 - 1);
      if ( (unsigned __int8)(((signed int)result < 0) ^ v29) | ((_DWORD)result == 0) )
        result = (*((__int64 (__fastcall **)(int **))v141 + 2))(&v141);
    }
    v153 = &dword_141FCF430;
    if ( SHIDWORD(v155) > 0 )
    {
      v30 = _InterlockedExchangeAdd((volatile signed __int32 *)v154 - 1, 0xFFFFFFFF);
      v29 = __OFSUB__(v30, 1);
      result = (unsigned int)(v30 - 1);
      if ( (unsigned __int8)(((signed int)result < 0) ^ v29) | ((_DWORD)result == 0) )
        result = (*((__int64 (__fastcall **)(int **))v153 + 2))(&v153);
    }
  }
  else
  {
    v31 = &v362;
    v32 = "disband";
    v33 = 100;
    do
    {
      if ( *((_BYTE *)&_ImageBase + v33 + 43442464) != *((_BYTE *)&_ImageBase + (unsigned __int8)*v31 + 43442464) )
        break;
      ++v32;
      ++v31;
      v33 = *v32;
    }
    while ( *v32 );
    if ( *((char *)&_ImageBase + *(unsigned __int8 *)v32 + 43442464) == *((char *)&_ImageBase
                                                                        + (unsigned __int8)*v31
                                                                        + 43442464) )
      goto LABEL_262;
    v34 = &v362;
    v35 = "delete";
    v36 = 100;
    do
    {
      if ( *((_BYTE *)&_ImageBase + v36 + 43442464) != *((_BYTE *)&_ImageBase + (unsigned __int8)*v34 + 43442464) )
        break;
      ++v35;
      ++v34;
      v36 = *v35;
    }
    while ( *v35 );
    if ( *((char *)&_ImageBase + *(unsigned __int8 *)v35 + 43442464) == *((char *)&_ImageBase
                                                                        + (unsigned __int8)*v34
                                                                        + 43442464) )
    {
LABEL_262:
      sub_14098E750(&v358);
      if ( *v4 == 39 )
      {
        sub_1402929B0(&v360, v4);
        LOBYTE(v131) = 39;
        sub_1404910D0(&v360, v131);
      }
      else
      {
        v369 = 0;
        sub_1403085F0((char)v4, (unsigned __int64)&v369, 0);
        sub_140294060(&v369, &v359);
      }
      if ( v361 || v359 )
      {
        LOBYTE(v132) = 1;
        sub_140983E70(*(_QWORD *)(qword_143B54F38 + 8), &v358, 1i64, v132, 1, 1);
        v27 = 1;
      }
      else
      {
        v27 = 0;
      }
      result = sub_1409901B0(&v358);
    }
    else
    {
      v37 = &v362;
      v38 = "invite";
      v39 = "invite";
      v40 = 105;
      do
      {
        if ( *((_BYTE *)&_ImageBase + v40 + 43442464) != *((_BYTE *)&_ImageBase + (unsigned __int8)*v37 + 43442464) )
          break;
        ++v39;
        ++v37;
        v40 = *v39;
      }
      while ( *v39 );
      if ( *((char *)&_ImageBase + *(unsigned __int8 *)v39 + 43442464) == *((char *)&_ImageBase
                                                                          + (unsigned __int8)*v37
                                                                          + 43442464) )
      {
        v171 = &dword_141FCF430;
        v172 = Dst;
        v173 = 0i64;
        v140 = &v4[(signed int)sub_1403087E0((char)v4)];
        v201 = &dword_141FCF430;
        v202 = Dst;
        v203 = 0i64;
        sub_1403087E0((char)v140);
        v41 = v351;
        result = qword_143B96BA0;
        if ( v351 == qword_143B96BA0 && (signed int)v173 <= 0 )
        {
          v27 = 0;
        }
        else
        {
          v27 = 1;
          v237 = 87;
          v238 = 4;
          v236 = &unk_1420EF210;
          v239 = qword_143B96DA0;
          v240 = qword_143B96BA0;
          v241 = &dword_141FCF430;
          v242 = Dst;
          v243 = 0i64;
          v244 = &dword_141FCF430;
          v245 = Dst;
          v246 = 0i64;
          v247 = &dword_141FCF430;
          v248 = Dst;
          v249 = 0i64;
          v239 = *(_QWORD *)sub_140B78830(qword_143B54F40 + 38416, &v357);
          v240 = v41;
          sub_1402928A0(&v241, &v171);
          sub_1402928A0(&v244, &v201);
          sub_140984B80(*(_QWORD *)(qword_143B54F38 + 8), &v236, 1i64, 1i64, 1, 1);
          result = sub_140991230(&v236);
        }
        v201 = &dword_141FCF430;
        if ( SHIDWORD(v203) > 0 )
        {
          v42 = _InterlockedExchangeAdd((volatile signed __int32 *)v202 - 1, 0xFFFFFFFF);
          v29 = __OFSUB__(v42, 1);
          result = (unsigned int)(v42 - 1);
          if ( (unsigned __int8)(((signed int)result < 0) ^ v29) | ((_DWORD)result == 0) )
            result = (*((__int64 (__fastcall **)(int **))v201 + 2))(&v201);
        }
        v171 = &dword_141FCF430;
        if ( SHIDWORD(v173) > 0 )
        {
          v43 = _InterlockedExchangeAdd((volatile signed __int32 *)v172 - 1, 0xFFFFFFFF);
          v29 = __OFSUB__(v43, 1);
          result = (unsigned int)(v43 - 1);
          if ( (unsigned __int8)(((signed int)result < 0) ^ v29) | ((_DWORD)result == 0) )
            result = (*((__int64 (__fastcall **)(int **))v171 + 2))(&v171);
        }
      }
      else
      {
        v44 = &v362;
        v45 = "petition";
        v46 = "petition";
        v47 = 112;
        do
        {
          if ( *((_BYTE *)&_ImageBase + v47 + 43442464) != *((_BYTE *)&_ImageBase + (unsigned __int8)*v44 + 43442464) )
            break;
          ++v46;
          ++v44;
          v47 = *v46;
        }
        while ( *v46 );
        if ( *((char *)&_ImageBase + *(unsigned __int8 *)v46 + 43442464) == *((char *)&_ImageBase
                                                                            + (unsigned __int8)*v44
                                                                            + 43442464) )
        {
          v27 = 1;
          v207 = &dword_141FCF430;
          v208 = Dst;
          v209 = 0i64;
          v204 = &dword_141FCF430;
          v205 = Dst;
          v206 = 0i64;
          v140 = &v4[(signed int)sub_1403087E0((char)v4)];
          sub_1403087E0((char)v140);
          v282 = 87;
          v283 = 7;
          v281 = &unk_1420EF228;
          v285 = &dword_141FCF430;
          v286 = Dst;
          v287 = 0i64;
          v288 = &dword_141FCF430;
          v289 = Dst;
          v290 = 0i64;
          v284 = qword_143B96DA0;
          sub_1402928A0(&v285, &v207);
          sub_1402928A0(&v288, &v204);
          sub_140985000(*(_QWORD *)(qword_143B54F38 + 8), &v281, 1i64, 1i64, 1, 1);
          result = sub_140991310(&v281);
          v204 = &dword_141FCF430;
          if ( SHIDWORD(v206) > 0 )
          {
            v48 = _InterlockedExchangeAdd((volatile signed __int32 *)v205 - 1, 0xFFFFFFFF);
            v29 = __OFSUB__(v48, 1);
            result = (unsigned int)(v48 - 1);
            if ( (unsigned __int8)(((signed int)result < 0) ^ v29) | ((_DWORD)result == 0) )
              result = (*((__int64 (__fastcall **)(int **))v204 + 2))(&v204);
          }
          v207 = &dword_141FCF430;
          if ( SHIDWORD(v209) > 0 )
          {
            v49 = _InterlockedExchangeAdd((volatile signed __int32 *)v208 - 1, 0xFFFFFFFF);
            v29 = __OFSUB__(v49, 1);
            result = (unsigned int)(v49 - 1);
            if ( (unsigned __int8)(((signed int)result < 0) ^ v29) | ((_DWORD)result == 0) )
              result = (*((__int64 (__fastcall **)(int **))v207 + 2))(&v207);
          }
        }
        else
        {
          v50 = &v362;
          v51 = "accept";
          v52 = 97;
          do
          {
            if ( *((_BYTE *)&_ImageBase + v52 + 43442464) != *((_BYTE *)&_ImageBase + (unsigned __int8)*v50 + 43442464) )
              break;
            ++v51;
            ++v50;
            v52 = *v51;
          }
          while ( *v51 );
          if ( *((char *)&_ImageBase + *(unsigned __int8 *)v51 + 43442464) == *((char *)&_ImageBase
                                                                              + (unsigned __int8)*v50
                                                                              + 43442464) )
          {
            v177 = &dword_141FCF430;
            v178 = Dst;
            v179 = 0i64;
            v140 = &v4[(signed int)sub_1403087E0((char)v4)];
            v174 = &dword_141FCF430;
            v175 = Dst;
            v176 = 0i64;
            sub_1403087E0((char)v140);
            v53 = v178;
            v54 = 105;
            do
            {
              if ( *((_BYTE *)&_ImageBase + v54 + 43442464) != *((_BYTE *)&_ImageBase + (unsigned __int8)*v53 + 43442464) )
                break;
              ++v38;
              ++v53;
              v54 = *v38;
            }
            while ( *v38 );
            if ( *((char *)&_ImageBase + *(unsigned __int8 *)v38 + 43442464) == *((char *)&_ImageBase
                                                                                + (unsigned __int8)*v53
                                                                                + 43442464) )
            {
              v27 = 1;
              v332 = 87;
              v333 = 5;
              v331 = &unk_1420EF218;
              v222 = 0i64;
              sub_140294060(v175, &v222);
              v334 = v222;
              v335 = 1;
              result = sub_140984D30(*(_QWORD *)(qword_143B54F38 + 8), &v331, 1i64, 1i64, 1, 1);
            }
            else
            {
              v55 = v178;
              v56 = 112;
              do
              {
                if ( *((_BYTE *)&_ImageBase + v56 + 43442464) != *((_BYTE *)&_ImageBase
                                                                 + (unsigned __int8)*v55
                                                                 + 43442464) )
                  break;
                ++v45;
                ++v55;
                v56 = *v45;
              }
              while ( *v45 );
              result = (unsigned __int8)*v55;
              if ( *((char *)&_ImageBase + *(unsigned __int8 *)v45 + 43442464) == *((char *)&_ImageBase
                                                                                  + result
                                                                                  + 43442464) )
              {
                v27 = 1;
                v337 = 87;
                v338 = 8;
                v336 = &unk_1420EF230;
                v223 = 0i64;
                sub_140294060(v175, &v223);
                v339 = v223;
                v340 = 1;
                result = sub_140985150(*(_QWORD *)(qword_143B54F38 + 8), &v336, 1i64, 1i64, 1, 1);
              }
              else
              {
                v27 = 0;
              }
            }
            v174 = &dword_141FCF430;
            if ( SHIDWORD(v176) > 0 )
            {
              v57 = _InterlockedExchangeAdd((volatile signed __int32 *)v175 - 1, 0xFFFFFFFF);
              v29 = __OFSUB__(v57, 1);
              result = (unsigned int)(v57 - 1);
              if ( (unsigned __int8)(((signed int)result < 0) ^ v29) | ((_DWORD)result == 0) )
                result = (*((__int64 (__fastcall **)(int **))v174 + 2))(&v174);
            }
            v177 = &dword_141FCF430;
            if ( SHIDWORD(v179) > 0 )
            {
              v58 = _InterlockedExchangeAdd((volatile signed __int32 *)v178 - 1, 0xFFFFFFFF);
              v29 = __OFSUB__(v58, 1);
              result = (unsigned int)(v58 - 1);
              if ( (unsigned __int8)(((signed int)result < 0) ^ v29) | ((_DWORD)result == 0) )
                result = (*((__int64 (__fastcall **)(int **))v177 + 2))(&v177);
            }
          }
          else
          {
            v59 = &v362;
            v60 = "decline";
            v61 = 100;
            do
            {
              if ( *((_BYTE *)&_ImageBase + v61 + 43442464) != *((_BYTE *)&_ImageBase + (unsigned __int8)*v59 + 43442464) )
                break;
              ++v60;
              ++v59;
              v61 = *v60;
            }
            while ( *v60 );
            if ( *((char *)&_ImageBase + *(unsigned __int8 *)v60 + 43442464) == *((char *)&_ImageBase
                                                                                + (unsigned __int8)*v59
                                                                                + 43442464) )
            {
              v168 = &dword_141FCF430;
              v169 = Dst;
              v170 = 0i64;
              v140 = &v4[(signed int)sub_1403087E0((char)v4)];
              v180 = &dword_141FCF430;
              v181 = Dst;
              v182 = 0i64;
              sub_1403087E0((char)v140);
              v62 = v169;
              v63 = 105;
              do
              {
                if ( *((_BYTE *)&_ImageBase + v63 + 43442464) != *((_BYTE *)&_ImageBase
                                                                 + (unsigned __int8)*v62
                                                                 + 43442464) )
                  break;
                ++v38;
                ++v62;
                v63 = *v38;
              }
              while ( *v38 );
              if ( *((char *)&_ImageBase + *(unsigned __int8 *)v38 + 43442464) == *((char *)&_ImageBase
                                                                                  + (unsigned __int8)*v62
                                                                                  + 43442464) )
              {
                v27 = 1;
                v342 = 87;
                v343 = 5;
                v341 = &unk_1420EF218;
                v224 = 0i64;
                sub_140294060(v181, &v224);
                v344 = v224;
                v345 = 0;
                result = sub_140984D30(*(_QWORD *)(qword_143B54F38 + 8), &v341, 1i64, 1i64, 1, 1);
              }
              else
              {
                v64 = v169;
                v65 = 112;
                do
                {
                  if ( *((_BYTE *)&_ImageBase + v65 + 43442464) != *((_BYTE *)&_ImageBase
                                                                   + (unsigned __int8)*v64
                                                                   + 43442464) )
                    break;
                  ++v45;
                  ++v64;
                  v65 = *v45;
                }
                while ( *v45 );
                result = (unsigned __int8)*v64;
                if ( *((char *)&_ImageBase + *(unsigned __int8 *)v45 + 43442464) == *((char *)&_ImageBase
                                                                                    + result
                                                                                    + 43442464) )
                {
                  v27 = 1;
                  v347 = 87;
                  v348 = 8;
                  v346 = &unk_1420EF230;
                  v221 = 0i64;
                  sub_140294060(v181, &v221);
                  v349 = v221;
                  v350 = 0;
                  result = sub_140985150(*(_QWORD *)(qword_143B54F38 + 8), &v346, 1i64, 1i64, 1, 1);
                }
                else
                {
                  v27 = 0;
                }
              }
              v180 = &dword_141FCF430;
              if ( SHIDWORD(v182) > 0 )
              {
                v66 = _InterlockedExchangeAdd((volatile signed __int32 *)v181 - 1, 0xFFFFFFFF);
                v29 = __OFSUB__(v66, 1);
                result = (unsigned int)(v66 - 1);
                if ( (unsigned __int8)(((signed int)result < 0) ^ v29) | ((_DWORD)result == 0) )
                  result = (*((__int64 (__fastcall **)(int **))v180 + 2))(&v180);
              }
              v168 = &dword_141FCF430;
              if ( SHIDWORD(v170) > 0 )
              {
                v67 = _InterlockedExchangeAdd((volatile signed __int32 *)v169 - 1, 0xFFFFFFFF);
                v29 = __OFSUB__(v67, 1);
                result = (unsigned int)(v67 - 1);
                if ( (unsigned __int8)(((signed int)result < 0) ^ v29) | ((_DWORD)result == 0) )
                  result = (*((__int64 (__fastcall **)(int **))v168 + 2))(&v168);
              }
            }
            else
            {
              v68 = &v362;
              v69 = "revoke";
              v70 = 114;
              do
              {
                if ( *((_BYTE *)&_ImageBase + v70 + 43442464) != *((_BYTE *)&_ImageBase
                                                                 + (unsigned __int8)*v68
                                                                 + 43442464) )
                  break;
                ++v69;
                ++v68;
                v70 = *v69;
              }
              while ( *v69 );
              if ( *((char *)&_ImageBase + *(unsigned __int8 *)v69 + 43442464) == *((char *)&_ImageBase
                                                                                  + (unsigned __int8)*v68
                                                                                  + 43442464) )
              {
                v195 = &dword_141FCF430;
                v196 = Dst;
                v197 = 0i64;
                v140 = &v4[(signed int)sub_1403087E0((char)v4)];
                v198 = &dword_141FCF430;
                v199 = Dst;
                v200 = 0i64;
                sub_1403087E0((char)v140);
                v71 = v196;
                v72 = 105;
                do
                {
                  if ( *((_BYTE *)&_ImageBase + v72 + 43442464) != *((_BYTE *)&_ImageBase
                                                                   + (unsigned __int8)*v71
                                                                   + 43442464) )
                    break;
                  ++v38;
                  ++v71;
                  v72 = *v38;
                }
                while ( *v38 );
                if ( *((char *)&_ImageBase + *(unsigned __int8 *)v38 + 43442464) == *((char *)&_ImageBase
                                                                                    + (unsigned __int8)*v71
                                                                                    + 43442464) )
                {
                  v27 = 1;
                  v324 = 87;
                  v325 = 6;
                  v323 = &unk_1420EF220;
                  v225 = 0i64;
                  sub_140294060(v199, &v225);
                  v326 = v225;
                  result = sub_140984EC0(*(_QWORD *)(qword_143B54F38 + 8), &v323, 1i64, 1i64, 1, 1);
                }
                else
                {
                  v73 = v196;
                  v74 = 112;
                  do
                  {
                    if ( *((_BYTE *)&_ImageBase + v74 + 43442464) != *((_BYTE *)&_ImageBase
                                                                     + (unsigned __int8)*v73
                                                                     + 43442464) )
                      break;
                    ++v45;
                    ++v73;
                    v74 = *v45;
                  }
                  while ( *v45 );
                  result = (unsigned __int8)*v73;
                  if ( *((char *)&_ImageBase + *(unsigned __int8 *)v45 + 43442464) == *((char *)&_ImageBase
                                                                                      + result
                                                                                      + 43442464) )
                  {
                    v27 = 1;
                    v328 = 87;
                    v329 = 9;
                    v327 = &unk_1420EF238;
                    v216 = 0i64;
                    sub_140294060(v199, &v216);
                    v330 = v216;
                    result = sub_1409852E0(*(_QWORD *)(qword_143B54F38 + 8), &v327, 1i64, 1i64, 1, 1);
                  }
                  else
                  {
                    v27 = 0;
                  }
                }
                v198 = &dword_141FCF430;
                if ( SHIDWORD(v200) > 0 )
                {
                  v75 = _InterlockedExchangeAdd((volatile signed __int32 *)v199 - 1, 0xFFFFFFFF);
                  v29 = __OFSUB__(v75, 1);
                  result = (unsigned int)(v75 - 1);
                  if ( (unsigned __int8)(((signed int)result < 0) ^ v29) | ((_DWORD)result == 0) )
                    result = (*((__int64 (__fastcall **)(int **))v198 + 2))(&v198);
                }
                v195 = &dword_141FCF430;
                if ( SHIDWORD(v197) > 0 )
                {
                  v76 = _InterlockedExchangeAdd((volatile signed __int32 *)v196 - 1, 0xFFFFFFFF);
                  v29 = __OFSUB__(v76, 1);
                  result = (unsigned int)(v76 - 1);
                  if ( (unsigned __int8)(((signed int)result < 0) ^ v29) | ((_DWORD)result == 0) )
                    result = (*((__int64 (__fastcall **)(int **))v195 + 2))(&v195);
                }
              }
              else
              {
                v77 = &v362;
                v78 = "quit";
                v79 = 113;
                do
                {
                  if ( *((_BYTE *)&_ImageBase + v79 + 43442464) != *((_BYTE *)&_ImageBase
                                                                   + (unsigned __int8)*v77
                                                                   + 43442464) )
                    break;
                  ++v78;
                  ++v77;
                  v79 = *v78;
                }
                while ( *v78 );
                if ( *((char *)&_ImageBase + *(unsigned __int8 *)v78 + 43442464) == *((char *)&_ImageBase
                                                                                    + (unsigned __int8)*v77
                                                                                    + 43442464) )
                {
                  v27 = 1;
                  v306 = 87;
                  v307 = 13;
                  v305 = &unk_1420EF240;
                  v308 = qword_143B96DA0;
                  v308 = *(_QWORD *)sub_140B78830(qword_143B54F40 + 38416, &v356);
                  result = sub_140985420(*(_QWORD *)(qword_143B54F38 + 8), &v305, 1i64, 1i64, 1, 1);
                }
                else
                {
                  v80 = &v362;
                  v81 = "kick";
                  v82 = 107;
                  do
                  {
                    if ( *((_BYTE *)&_ImageBase + v82 + 43442464) != *((_BYTE *)&_ImageBase
                                                                     + (unsigned __int8)*v80
                                                                     + 43442464) )
                      break;
                    ++v81;
                    ++v80;
                    v82 = *v81;
                  }
                  while ( *v81 );
                  if ( *((char *)&_ImageBase + *(unsigned __int8 *)v81 + 43442464) == *((char *)&_ImageBase
                                                                                      + (unsigned __int8)*v80
                                                                                      + 43442464) )
                  {
                    v156 = &dword_141FCF430;
                    v157 = Dst;
                    v158 = 0i64;
                    sub_1402929B0(&v156, &Mem);
                    v83 = qword_143B96DA0;
                    v217 = qword_143B96DA0;
                    if ( *v4 == 39 )
                    {
                      v84 = &v4[(signed int)sub_1403087E0((char)v4)];
                      v85 = &v84[(signed int)sub_1403087E0((char)v84)];
                      v86 = (__int64)&v85[(signed int)sub_140308360(v85)];
                    }
                    else
                    {
                      v365 = 0;
                      v87 = (signed int)sub_1403085F0((char)v4, (unsigned __int64)&v365, 0);
                      sub_140294060(&v365, &v217);
                      v86 = (__int64)&v4[v87];
                      v83 = v217;
                    }
                    v140 = (CHAR *)v86;
                    v192 = &dword_141FCF430;
                    v193 = Dst;
                    v194 = 0i64;
                    sub_1403087E0(v86);
                    v88 = v355;
                    result = qword_143B96BA0;
                    if ( v355 == qword_143B96BA0 && (signed int)v194 <= 0 )
                    {
                      v27 = 0;
                    }
                    else
                    {
                      v27 = 1;
                      v292 = 88;
                      v293 = 27;
                      v291 = &unk_1420EF270;
                      v295 = &dword_141FCF430;
                      v296 = Dst;
                      v297 = 0i64;
                      v298 = qword_143B96BA0;
                      v299 = &dword_141FCF430;
                      v300 = Dst;
                      v301 = 0i64;
                      v302 = &dword_141FCF430;
                      v303 = Dst;
                      v304 = 0i64;
                      v294 = v83;
                      sub_1402928A0(&v295, &v156);
                      v298 = v88;
                      sub_1402928A0(&v299, &v192);
                      sub_140984020(*(_QWORD *)(qword_143B54F38 + 8), &v291, 1i64, 1i64, 1, 1);
                      result = sub_140990290(&v291);
                    }
                    v192 = &dword_141FCF430;
                    if ( SHIDWORD(v194) > 0 )
                    {
                      v89 = _InterlockedExchangeAdd((volatile signed __int32 *)v193 - 1, 0xFFFFFFFF);
                      v29 = __OFSUB__(v89, 1);
                      result = (unsigned int)(v89 - 1);
                      if ( (unsigned __int8)(((signed int)result < 0) ^ v29) | ((_DWORD)result == 0) )
                        result = (*((__int64 (__fastcall **)(int **))v192 + 2))(&v192);
                    }
                    v156 = &dword_141FCF430;
                    if ( SHIDWORD(v158) > 0 )
                    {
                      v90 = _InterlockedExchangeAdd((volatile signed __int32 *)v157 - 1, 0xFFFFFFFF);
                      v29 = __OFSUB__(v90, 1);
                      result = (unsigned int)(v90 - 1);
                      if ( (unsigned __int8)(((signed int)result < 0) ^ v29) | ((_DWORD)result == 0) )
                        result = (*((__int64 (__fastcall **)(int **))v156 + 2))(&v156);
                    }
                  }
                  else
                  {
                    v91 = &v362;
                    v92 = "motd";
                    v93 = 109;
                    do
                    {
                      if ( *((_BYTE *)&_ImageBase + v93 + 43442464) != *((_BYTE *)&_ImageBase
                                                                       + (unsigned __int8)*v91
                                                                       + 43442464) )
                        break;
                      ++v92;
                      ++v91;
                      v93 = *v92;
                    }
                    while ( *v92 );
                    if ( *((char *)&_ImageBase + *(unsigned __int8 *)v92 + 43442464) == *((char *)&_ImageBase
                                                                                        + (unsigned __int8)*v91
                                                                                        + 43442464) )
                    {
                      v150 = &dword_141FCF430;
                      v151 = Dst;
                      v152 = 0i64;
                      sub_1402929B0(&v150, &Mem);
                      v94 = qword_143B96DA0;
                      v218 = qword_143B96DA0;
                      if ( *v4 == 39 )
                      {
                        v95 = &v4[(signed int)sub_1403087E0((char)v4)];
                        v96 = &v95[(signed int)sub_1403087E0((char)v95)];
                        result = sub_140308360(v96);
                        v97 = (__int64)&v96[(signed int)result];
                      }
                      else
                      {
                        v366 = 0;
                        v98 = (signed int)sub_1403085F0((char)v4, (unsigned __int64)&v366, 0);
                        result = sub_140294060(&v366, &v218);
                        v97 = (__int64)&v4[v98];
                        v94 = v218;
                      }
                      v140 = (CHAR *)v97;
                      if ( (signed int)v152 <= 0 && v94 == qword_143B96DA0 )
                      {
                        v27 = 0;
                      }
                      else
                      {
                        v27 = 1;
                        v310 = 88;
                        v311 = 26;
                        v309 = &unk_1420EF278;
                        v313 = &dword_141FCF430;
                        v314 = Dst;
                        v315 = 0i64;
                        v316 = &dword_141FCF430;
                        v317 = Dst;
                        v318 = 0i64;
                        v319 = &dword_141FCF430;
                        v320 = Dst;
                        v321 = 0i64;
                        v322 = qword_143B96B90;
                        v312 = v94;
                        sub_1402928A0(&v313, &v150);
                        sub_1402929B0(&v316, v97);
                        sub_1409841D0(*(_QWORD *)(qword_143B54F38 + 8), &v309, 1i64, 1i64, 1, 1);
                        result = sub_140990350(&v309);
                      }
                      v150 = &dword_141FCF430;
                      if ( SHIDWORD(v152) > 0 )
                      {
                        v99 = _InterlockedExchangeAdd((volatile signed __int32 *)v151 - 1, 0xFFFFFFFF);
                        v29 = __OFSUB__(v99, 1);
                        result = (unsigned int)(v99 - 1);
                        if ( (unsigned __int8)(((signed int)result < 0) ^ v29) | ((_DWORD)result == 0) )
                          result = (*((__int64 (__fastcall **)(int **))v150 + 2))(&v150);
                      }
                    }
                    else
                    {
                      v100 = &v362;
                      v101 = "rename";
                      v102 = 114;
                      do
                      {
                        if ( *((_BYTE *)&_ImageBase + v102 + 43442464) != *((_BYTE *)&_ImageBase
                                                                          + (unsigned __int8)*v100
                                                                          + 43442464) )
                          break;
                        ++v101;
                        ++v100;
                        v102 = *v101;
                      }
                      while ( *v101 );
                      if ( *((char *)&_ImageBase + *(unsigned __int8 *)v101 + 43442464) == *((char *)&_ImageBase
                                                                                           + (unsigned __int8)*v100
                                                                                           + 43442464) )
                      {
                        v147 = &dword_141FCF430;
                        v148 = Dst;
                        v149 = 0i64;
                        sub_1402929B0(&v147, &Mem);
                        v103 = qword_143B96DA0;
                        v219 = qword_143B96DA0;
                        if ( *v4 == 39 )
                        {
                          v104 = &v4[(signed int)sub_1403087E0((char)v4)];
                          v105 = &v104[(signed int)sub_1403087E0((char)v104)];
                          v106 = &v105[(signed int)sub_140308360(v105)];
                        }
                        else
                        {
                          v367 = 0;
                          v107 = (signed int)sub_1403085F0((char)v4, (unsigned __int64)&v367, 0);
                          sub_140294060(&v367, &v219);
                          v106 = &v4[v107];
                          v103 = v219;
                        }
                        v159 = &dword_141FCF430;
                        v160 = Dst;
                        v161 = 0i64;
                        v189 = &dword_141FCF430;
                        v190 = Dst;
                        v191 = 0i64;
                        v108 = &v106[(signed int)sub_1403087E0((char)v106)];
                        v109 = &v108[(signed int)sub_1403087E0((char)v108)];
                        v110 = (__int64)&v109[(signed int)sub_140308360(v109)];
                        v140 = (CHAR *)((signed int)sub_1403087E0(v110) + v110);
                        result = sub_1403087E0((char)v140);
                        if ( (signed int)v161 > 0 && ((signed int)v149 > 0 || v103) )
                        {
                          v27 = 1;
                          v269 = 88;
                          v270 = 25;
                          v268 = &unk_1420EF268;
                          v272 = &dword_141FCF430;
                          v273 = Dst;
                          v274 = 0i64;
                          v275 = &dword_141FCF430;
                          v276 = Dst;
                          v277 = 0i64;
                          v278 = &dword_141FCF430;
                          v279 = Dst;
                          v280 = 0i64;
                          v271 = v103;
                          sub_1402928A0(&v272, &v147);
                          sub_1402928A0(&v275, &v159);
                          sub_1402928A0(&v278, &v189);
                          sub_140984380(*(_QWORD *)(qword_143B54F38 + 8), &v268, 1i64, 1i64, 1, 1);
                          result = sub_140990410(&v268);
                        }
                        else
                        {
                          v27 = 0;
                        }
                        v189 = &dword_141FCF430;
                        if ( SHIDWORD(v191) > 0 )
                        {
                          v111 = _InterlockedExchangeAdd((volatile signed __int32 *)v190 - 1, 0xFFFFFFFF);
                          v29 = __OFSUB__(v111, 1);
                          result = (unsigned int)(v111 - 1);
                          if ( (unsigned __int8)(((signed int)result < 0) ^ v29) | ((_DWORD)result == 0) )
                            result = (*((__int64 (__fastcall **)(int **))v189 + 2))(&v189);
                        }
                        v159 = &dword_141FCF430;
                        if ( SHIDWORD(v161) > 0 )
                        {
                          v112 = _InterlockedExchangeAdd((volatile signed __int32 *)v160 - 1, 0xFFFFFFFF);
                          v29 = __OFSUB__(v112, 1);
                          result = (unsigned int)(v112 - 1);
                          if ( (unsigned __int8)(((signed int)result < 0) ^ v29) | ((_DWORD)result == 0) )
                            result = (*((__int64 (__fastcall **)(int **))v159 + 2))(&v159);
                        }
                        v147 = &dword_141FCF430;
                        if ( SHIDWORD(v149) > 0 )
                        {
                          v113 = _InterlockedExchangeAdd((volatile signed __int32 *)v148 - 1, 0xFFFFFFFF);
                          v29 = __OFSUB__(v113, 1);
                          result = (unsigned int)(v113 - 1);
                          if ( (unsigned __int8)(((signed int)result < 0) ^ v29) | ((_DWORD)result == 0) )
                            result = (*((__int64 (__fastcall **)(int **))v147 + 2))(&v147);
                        }
                      }
                      else
                      {
                        v114 = &v362;
                        v115 = "promote";
                        v116 = 112;
                        do
                        {
                          if ( *((_BYTE *)&_ImageBase + v116 + 43442464) != *((_BYTE *)&_ImageBase
                                                                            + (unsigned __int8)*v114
                                                                            + 43442464) )
                            break;
                          ++v115;
                          ++v114;
                          v116 = *v115;
                        }
                        while ( *v115 );
                        if ( *((char *)&_ImageBase + *(unsigned __int8 *)v115 + 43442464) == *((char *)&_ImageBase
                                                                                             + (unsigned __int8)*v114
                                                                                             + 43442464) )
                          goto LABEL_263;
                        v117 = &v362;
                        v118 = "demote";
                        v119 = 100;
                        do
                        {
                          if ( *((_BYTE *)&_ImageBase + v119 + 43442464) != *((_BYTE *)&_ImageBase
                                                                            + (unsigned __int8)*v117
                                                                            + 43442464) )
                            break;
                          ++v118;
                          ++v117;
                          v119 = *v118;
                        }
                        while ( *v118 );
                        result = (unsigned __int8)*v117;
                        if ( *((char *)&_ImageBase + *(unsigned __int8 *)v118 + 43442464) != *((char *)&_ImageBase
                                                                                             + result
                                                                                             + 43442464) )
                        {
                          v27 = 0;
                        }
                        else
                        {
LABEL_263:
                          v162 = &dword_141FCF430;
                          v163 = Dst;
                          v164 = 0i64;
                          sub_1402929B0(&v162, &Mem);
                          v120 = qword_143B96DA0;
                          v220 = qword_143B96DA0;
                          if ( *v4 == 39 )
                          {
                            v121 = &v4[(signed int)sub_1403087E0((char)v4)];
                            v122 = &v121[(signed int)sub_1403087E0((char)v121)];
                            v123 = &v122[(signed int)sub_140308360(v122)];
                          }
                          else
                          {
                            v368 = 0;
                            v124 = (signed int)sub_1403085F0((char)v4, (unsigned __int64)&v368, 0);
                            sub_140294060(&v368, &v220);
                            v123 = &v4[v124];
                            v120 = v220;
                          }
                          v183 = &dword_141FCF430;
                          v184 = Dst;
                          v185 = 0i64;
                          v125 = &v123[(signed int)sub_1403087E0((char)v123)];
                          v210 = &dword_141FCF430;
                          v211 = Dst;
                          v212 = 0i64;
                          v140 = &v125[(signed int)sub_1403087E0((char)v125)];
                          v186 = &dword_141FCF430;
                          v187 = Dst;
                          v188 = 0i64;
                          result = sub_1403087E0((char)v140);
                          if ( (signed int)v185 <= 0
                            || (v126 = v354, result = qword_143B96BA0, v354 == qword_143B96BA0) && (signed int)v188 <= 0 )
                          {
                            v27 = 0;
                          }
                          else
                          {
                            v27 = 1;
                            v251 = 88;
                            v252 = 28;
                            v250 = &unk_1420EF260;
                            v254 = &dword_141FCF430;
                            v255 = Dst;
                            v256 = 0i64;
                            v257 = qword_143B96BA0;
                            v258 = &dword_141FCF430;
                            v259 = Dst;
                            v260 = 0i64;
                            v261 = &dword_141FCF430;
                            v262 = Dst;
                            v263 = 0i64;
                            v264 = 0;
                            v265 = &dword_141FCF430;
                            v266 = Dst;
                            v267 = 0i64;
                            v253 = v120;
                            sub_1402928A0(&v254, &v162);
                            v257 = v126;
                            sub_1402928A0(&v258, &v186);
                            sub_1402928A0(&v261, &v183);
                            sub_1402928A0(&v265, &v210);
                            sub_140983C40(*(_QWORD *)(qword_143B54F38 + 8), &v250, 1i64, 1i64, 1, 1);
                            result = sub_140990040(&v250);
                          }
                          v186 = &dword_141FCF430;
                          if ( SHIDWORD(v188) > 0 )
                          {
                            v127 = _InterlockedExchangeAdd((volatile signed __int32 *)v187 - 1, 0xFFFFFFFF);
                            v29 = __OFSUB__(v127, 1);
                            result = (unsigned int)(v127 - 1);
                            if ( (unsigned __int8)(((signed int)result < 0) ^ v29) | ((_DWORD)result == 0) )
                              result = (*((__int64 (__fastcall **)(int **))v186 + 2))(&v186);
                          }
                          v210 = &dword_141FCF430;
                          if ( SHIDWORD(v212) > 0 )
                          {
                            v128 = _InterlockedExchangeAdd((volatile signed __int32 *)v211 - 1, 0xFFFFFFFF);
                            v29 = __OFSUB__(v128, 1);
                            result = (unsigned int)(v128 - 1);
                            if ( (unsigned __int8)(((signed int)result < 0) ^ v29) | ((_DWORD)result == 0) )
                              result = (*((__int64 (__fastcall **)(int **))v210 + 2))(&v210);
                          }
                          v183 = &dword_141FCF430;
                          if ( SHIDWORD(v185) > 0 )
                          {
                            v129 = _InterlockedExchangeAdd((volatile signed __int32 *)v184 - 1, 0xFFFFFFFF);
                            v29 = __OFSUB__(v129, 1);
                            result = (unsigned int)(v129 - 1);
                            if ( (unsigned __int8)(((signed int)result < 0) ^ v29) | ((_DWORD)result == 0) )
                              result = (*((__int64 (__fastcall **)(int **))v183 + 2))(&v183);
                          }
                          v162 = &dword_141FCF430;
                          if ( SHIDWORD(v164) > 0 )
                          {
                            v130 = _InterlockedExchangeAdd((volatile signed __int32 *)v163 - 1, 0xFFFFFFFF);
                            v29 = __OFSUB__(v130, 1);
                            result = (unsigned int)(v130 - 1);
                            if ( (unsigned __int8)(((signed int)result < 0) ^ v29) | ((_DWORD)result == 0) )
                              result = (*((__int64 (__fastcall **)(int **))v162 + 2))(&v162);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v213 = &dword_141FCF430;
  if ( SHIDWORD(v215) > 0 )
  {
    v133 = _InterlockedExchangeAdd((volatile signed __int32 *)v214 - 1, 0xFFFFFFFF);
    v29 = __OFSUB__(v133, 1);
    result = (unsigned int)(v133 - 1);
    if ( (unsigned __int8)(((signed int)result < 0) ^ v29) | ((_DWORD)result == 0) )
      result = (*((__int64 (__fastcall **)(int **))v213 + 2))(&v213);
  }
  if ( !v27 )
  {
LABEL_260:
    v144 = &dword_141FCF430;
    v145 = Dst;
    v146 = 0i64;
    sub_1402929B0(&v144, "Usage:\n");
    sub_1402C2A20(&v144, "  All outfit names must be surrounded in %c, Ex: %cThe Trapper Keepers%c.\n");
    v134 = "  {target} can be a CharacterGuid or player name; if none is specified, the current admin target will be used"
           ".\n"
           "  /outfit create <outfitname> {target}\n"
           "  /outfit disband <outfit key>\n"
           "  /outfit rename <outfit name/key> <newname>\n"
           "  /outfit invite {target}\n"
           "  /outfit petition <outfitname>\n"
           "  /outfit accept [invite|petition] <invitationKey>\n"
           "  /outfit decline [invite|petition] <invitationKey>\n"
           "  /outfit revoke [invite|petition] <invitationKey>\n"
           "  /outfit <promote|demote> <outfit name/key> <rankname> <reason> {target} - The Rankname is Case Sensitive (L"
           "eader, Member ect.)\n"
           "  /outfit motd <outfit name/key> <motd>\n"
           "  /outfit kick <outfit name/key> {target}\n"
           "  /outfit quit\n";
    do
      ++v134;
    while ( *v134 );
    v135 = (_DWORD)v134
         - (unsigned __int64)"  {target} can be a CharacterGuid or player name; if none is specified, the current admin t"
                             "arget will be used.\n"
                             "  /outfit create <outfitname> {target}\n"
                             "  /outfit disband <outfit key>\n"
                             "  /outfit rename <outfit name/key> <newname>\n"
                             "  /outfit invite {target}\n"
                             "  /outfit petition <outfitname>\n"
                             "  /outfit accept [invite|petition] <invitationKey>\n"
                             "  /outfit decline [invite|petition] <invitationKey>\n"
                             "  /outfit revoke [invite|petition] <invitationKey>\n"
                             "  /outfit <promote|demote> <outfit name/key> <rankname> <reason> {target} - The Rankname is"
                             " Case Sensitive (Leader, Member ect.)\n"
                             "  /outfit motd <outfit name/key> <motd>\n"
                             "  /outfit kick <outfit name/key> {target}\n"
                             "  /outfit quit\n";
    v136 = v135 + v146;
    if ( v135 + (_DWORD)v146 )
    {
      if ( v136 + 1 > SHIDWORD(v146) || SHIDWORD(v146) > 0 && *((_DWORD *)v145 - 1) > 1 )
        sub_140294340(&v144);
      memmove(
        &v145[(signed int)v146],
        "  {target} can be a CharacterGuid or player name; if none is specified, the current admin target will be used.\n"
        "  /outfit create <outfitname> {target}\n"
        "  /outfit disband <outfit key>\n"
        "  /outfit rename <outfit name/key> <newname>\n"
        "  /outfit invite {target}\n"
        "  /outfit petition <outfitname>\n"
        "  /outfit accept [invite|petition] <invitationKey>\n"
        "  /outfit decline [invite|petition] <invitationKey>\n"
        "  /outfit revoke [invite|petition] <invitationKey>\n"
        "  /outfit <promote|demote> <outfit name/key> <rankname> <reason> {target} - The Rankname is Case Sensitive (Lead"
        "er, Member ect.)\n"
        "  /outfit motd <outfit name/key> <motd>\n"
        "  /outfit kick <outfit name/key> {target}\n"
        "  /outfit quit\n",
        v135 + 1);
      LODWORD(v146) = v136;
      v2 = v145;
    }
    else
    {
      if ( SHIDWORD(v146) > 0 && _InterlockedExchangeAdd((volatile signed __int32 *)v145 - 1, 0xFFFFFFFF) <= 1 )
        (*((void (__fastcall **)(int **))v144 + 2))(&v144);
      v145 = Dst;
      v146 = 0i64;
    }
    result = (*(__int64 (__fastcall **)(__int64, CHAR *, _QWORD))(*(_QWORD *)qword_143B54F28 + 8i64))(
               qword_143B54F28,
               v2,
               0i64);
    v144 = &dword_141FCF430;
    if ( SHIDWORD(v146) > 0 && _InterlockedExchangeAdd((volatile signed __int32 *)v145 - 1, 0xFFFFFFFF) <= 1 )
      result = (*((__int64 (__fastcall **)(int **))v144 + 2))(&v144);
  }
  return result;
}
